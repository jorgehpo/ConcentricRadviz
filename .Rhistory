require(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data = normalize.data(data)
n.anchors = ncol(data)
angle = 2*pi/n.anchors
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data = normalize.data(data)
n.anchors = ncol(data)
angle = 2*pi/n.anchors
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x = c(1,2,3)
y = c(-1,-2,-3)
plot(x,y)
w = iris
plot(w)
cat(toJSON(iris))
shiny::runApp()
help(data.frame)
for (i in iris){ cat(i)}
names(iris)
json = fromJSON("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CoversJ/Country/Carolina/Carolina - Parmalee (Cover by Taylor Moreau).mp3")
json = fromJSON("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CoversJ/Country/Carolina/Carolina - Parmalee (Cover by Taylor Moreau).mp3.json")
names(json$highlevel)
unlist(json)
unlist(json$highlevel)
unlist(json$highlevel)
unlist(json$highlevel, recursive  = T)
unlist(json$highlevel, recursive  = T)
as.numeric(unlist(json$highlevel, recursive  = T))
shiny::runApp()
shiny::runApp()
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
ids = is.na(nums)
nums = nums[-ids]
varNames = names(vars[-ids])
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat = varNames)
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
ids = is.na(nums)
nums = nums[-ids]
mat[fid,] = nums
}
return (as.data.frame(mat))
}
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
dat
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
ids = is.na(nums)
nums = nums[-ids]
varNames = names(vars[-ids])
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat) = varNames
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
ids = is.na(nums)
nums = nums[-ids]
mat[fid,] = nums
}
return (as.data.frame(mat))
}
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
warnings()
data[1,]
dat[1,]
as.numeric("")
as.numeric("0")
as.numeric("5+3i")
shiny::runApp()
source('~/.active-rstudio-document')
debugSource('~/Desktop/testGetJSON.R')
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
js
vars
vars
nums
idsNA
nums
idsNA
which(idsNA)
source('~/Desktop/testGetJSON.R')
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
dat[,1]
dat[1,]
help(grepl)
grepl(dat[1,],'probability')
grepl(dat[1,1],'probability')
grepl(dat[1,],'probability')
apply(dat[1,], grepl, 'probability')
lapply(dat[1,],grepl, 'probability')
lapply(dat[1,],function(x){grepl(x,'probability')})
lapply(dat[1,],function(x){grepl(x,'probability')})
grepl("asdf", 'df')
grepl('df',"asdf")
lapply(dat[1,],function(x){grepl('probability',x)})
lapply(dat[1,],function(x){grepl('probability',x)})
grepl('df',"asdf")
lapply(dat[1,],function(x){grepl('probability',x)})
unlist(lapply(dat[1,],function(x){grepl('probability',x)}))
(lapply(dat[1,],function(x){grepl('probability',x)}))
unlist(lapply(dat[1,],function(x){grepl('probability',x)}))
unlist(lapply(dat[1,],function(x){grepl('probability',x)}))
grepl('jorge', 'oi, eu sou gokku')
grepl('jorge', 'oi, eu sou gokku, quer dizer, jorge')
unlist(lapply(colnames(dat[1,]),function(x){grepl('probability',x)}))
source('~/Desktop/testGetJSON.R')
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
image(as.matrix(dat))
dat[,1]
names(dat)
shiny::runApp()
cat(toJSON(dat))
names(dat)
datG = generateDataGenre("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
image(datG$dataFrame)
dat[1,]
length(dat[1,])
shiny::runApp()
names(ret)
names(dat)
chartr("jorge", "pedro", "o jorge eh legal")
grep
grep("jorge")
grep(pattern = "asdf",x = "jorge asdf")
grepl(pattern = "asdf",x = "jorge asdf")
grep(pattern = "asdf",x = "jorge asdf")
grep(pattern = ":%s/asdf/batata",x = "jorge asdf")
grep(pattern = "s/asdf/batata",x = "jorge asdf")
gsub("jorge","ana","jorge eh muito legal neh jorge")
gsub("jorge","ana",c("jorge eh muito legal neh jorge","jorge abacate jorge"))
source('~/Desktop/testGetJSON.R')
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
names(dat)
source('~/Desktop/testGetJSON.R')
dat = generateDataRecursive("/media/Dados/Experimentos/StreamingExtractorArchiveMusic/CAL500/")
names(dat)
dat[,1]
dat[1,]
shiny::runApp()
shiny::runApp()
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
varNames = names(vars)
nums = as.numeric(vars)
idsNA = which(is.na(nums))
idsProbability = which(unlist(lapply(varNames,function(x){grepl('probability',x)})))
ignoreIDs = c(idsNA,idsProbability)
varNames = varNames[-ignoreIDs]
varNames = gsub(".all","",varNames)
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat) = varNames
tags = list()
tags$title = c()
tags$artist = c()
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
tags$title = c(tags$title, js$tags$title)
tags$artist = c(tags$artist, js$tags$artist)
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
nums = nums[-ignoreIDs]
mat[fid,] = nums
}
return (as.data.frame(mat))
}
a = generateDataRecursive("data/CoversJ")
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
varNames = names(vars)
nums = as.numeric(vars)
idsNA = which(is.na(nums))
idsProbability = which(unlist(lapply(varNames,function(x){grepl('probability',x)})))
ignoreIDs = c(idsNA,idsProbability)
varNames = varNames[-ignoreIDs]
varNames = gsub(".all","",varNames)
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat) = varNames
ret = list()
ret$tags = list()
tags$title = c()
tags$artist = c()
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
ret$tags$title = c(ret$tags$title, js$tags$title)
ret$tags$artist = c(ret$tags$artist, js$tags$artist)
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
nums = nums[-ignoreIDs]
mat[fid,] = nums
}
ret$data = as.data.frame(mat)
return (ret)
}
a = generateDataRecursive("data/CoversJ")
a$tags
shiny::runApp()
a = generateDataRecursive("data/CoversJ")
a$tags
a$data
a$data[1,]
a$data[1,1:3]
a$data[1:3,]
js = fromJSON("data/CoversJ/Country/Carolina/Carolina - Parmalee (Cover by Taylor Moreau).mp3.json")
shiny::runApp()
a = generateDataRecursive("data/CoversJ")
a$tags$title
a$tags$artist
a$data
shiny::runApp()
names(a)
names(a$data)
grepl("tzane", names(a$data))
names(a$data)[grepl("tzane", names(a$data))]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
grepl("humor", names(a$data))
grepl("mood", names(a$data))
grepl("mood", names(a$data))
a$data[grepl("mood", names(a$data))]
names(a$data)[grepl("mood", names(a$data))]
shiny::runApp()
a = generateDataRecursive("data/CoversJ")
names(a$data)[grepl("mood", names(a$data))]
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
varNames = names(vars)
nums = as.numeric(vars)
idsNA = which(is.na(nums))
idsProbability = which(unlist(lapply(varNames,function(x){grepl('probability',x)})))
idsMirex = which(unlist(lapply(varNames,function(x){grepl('mirex',x)})))
idsNot = which(unlist(lapply(varNames,function(x){grepl('not',x)})))
ignoreIDs = c(idsNA,idsProbability,idsMirex)
varNames = varNames[-ignoreIDs]
varNames = gsub(".all","",varNames)
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat) = varNames
ret = list()
ret$tags = list()
ret$tags$title = c()
ret$tags$artist = c()
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
ret$tags$title = c(ret$tags$title, js$metadata$tags$title)
ret$tags$artist = c(ret$tags$artist, js$metadata$tags$artist)
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
nums = nums[-ignoreIDs]
mat[fid,] = nums
}
ret$data = as.data.frame(mat)
return (ret)
}
a = generateDataRecursive("data/CoversJ")
names(a$data)[grepl("mood", names(a$data))]
generateDataRecursive <- function(json.folder){
files= list.files(json.folder,recursive = T,full.names = T)
js = fromJSON(files[1])
vars = unlist(js$highlevel,recursive = T)
varNames = names(vars)
nums = as.numeric(vars)
idsNA = which(is.na(nums))
idsProbability = which(unlist(lapply(varNames,function(x){grepl('probability',x)})))
idsMirex = which(unlist(lapply(varNames,function(x){grepl('mirex',x)})))
idsNot = which(unlist(lapply(varNames,function(x){grepl('not',x)})))
ignoreIDs = c(idsNA,idsProbability,idsMirex,idsNot)
varNames = varNames[-ignoreIDs]
varNames = gsub(".all","",varNames)
mat = matrix(0, nrow = length(files), ncol = length(varNames))
colnames(mat) = varNames
ret = list()
ret$tags = list()
ret$tags$title = c()
ret$tags$artist = c()
for (fid in seq_len(length(files))){
js = fromJSON(files[fid])
ret$tags$title = c(ret$tags$title, js$metadata$tags$title)
ret$tags$artist = c(ret$tags$artist, js$metadata$tags$artist)
vars = unlist(js$highlevel,recursive = T)
nums = as.numeric(vars)
nums = nums[-ignoreIDs]
mat[fid,] = nums
}
ret$data = as.data.frame(mat)
return (ret)
}
a = generateDataRecursive("data/CoversJ")
names(a$data)[grepl("mood", names(a$data))]
a = generateDataRecursive("data/CoversJ")
shiny::runApp()
shiny::runApp()
