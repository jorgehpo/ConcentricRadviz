{
    "contents" : "normalize.data <- function(data){\n\tfor (j in 1:ncol(data)){\n\t\tr = range(data[,j])\n\t\t\tdata[,j] = (data[,j] - r[1])/(r[2] - r[1])\n\t}\n\treturn (data)\n}\n\n\nradviz.func <- function(data){\n  data = normalize.data(data)\n  n.anchors = ncol(data)\n  angle = 2*pi/n.anchors\n  anchor = matrix(0, nrow = n.anchors, ncol = 2)\n  anchor[1,] = c(1,0)\n  rot.mat = matrix(c(cos(angle), -sin(angle), sin(angle), cos(angle)),nrow = 2,ncol = 2, byrow = T)\n  for (i in 2:n.anchors){\n    anchor[i,] = rot.mat %*% anchor[i-1,];\n  }\n  \n  proj = NULL\n  for (i in 1:nrow(data)){#project points\n    yi = sum(data[i,])\n    pt = c(0,0)\n    for (j in 1:ncol(data)){\n      pt = pt + anchor[j,] * data[i,j]\n    }\n    pt = pt / yi\n    proj = rbind(proj, pt)\n  }\n  ret = list()\t\n  class(ret) = \"radviz\"\n  ret$proj = proj\n  ret$anchors = anchor\n  ret$names = colnames(data)\n  return(ret)\n  \n}\n\n\n#'@title Compute radviz from multidimentional data\n#'@description\n#'\\code{radviz(data) compute radviz from data}\n#'@param data: multidimentional data (columns represent variables. Rows, samples.)\n#'@examples\n#'r = radviz(iris[,1:4])\n#'plot(r, classes = iris[,5])\n#'@export\nradviz <- compiler::cmpfun(radviz.func)\n\n\n\n\n#'@title Plot radviz\n#'@description\n#'\\code{plot.radviz(data) plots object of class radviz}\n#'@param rad: Object of class radviz, see radviz.\n#'@param classes: Object classes, for color coding\n#'@export\nplot.radviz <- function(rad, classes = NULL, colors = NULL, pch = 1, plot.legend = TRUE){\n  \n  if (!is.null(classes)){\n    n.classes = length(levels(as.factor(classes)))\n    \n    if (is.null(colors)){\n      colors = c(\"#000000FF\", rainbow(n.classes-1))\n    }\n  }\n  \n\tif (class(rad)!=\"radviz\"){\n\t\tstop(\"Error. Object must be of class radviz\")\n  }\n  \n  circle = c(seq(0,2*pi,0.1), 0)\n  \n  plot(cos(circle), sin(circle), t='l', xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5))\n  \n  \n\tif (is.null(classes)){\n\t\tpoints(rad$proj, col = \"black\", pch = pch)\n\t}else{\n\t\tpoints(rad$proj, col = colors[as.numeric(as.factor(classes))], pch = pch)\n\t}\n  \n  \n  if (!is.null(rad$names)){\n    text(rad$anchors, labels = rad$names)\n  }else{\n    points(rad$anchors, pch  = 20)\n  }\n  \n  \n  \n  if (!is.null(classes) && plot.legend){\n    legend(x = \"bottomleft\",legend = levels(as.factor(classes)), pch = 1, col = colors)\n  }\n\n}\n",
    "created" : 1425478408015.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1923202041",
    "id" : "D36726B7",
    "lastKnownWriteTime" : 1425416374,
    "path" : "/media/Dados/Dropbox/Mestrado/Programas/PackagesJH/Radviz/R/radviz.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}